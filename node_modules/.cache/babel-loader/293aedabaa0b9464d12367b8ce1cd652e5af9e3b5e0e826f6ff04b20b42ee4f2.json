{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDgyedyGtko6U95FFF4WiBSfYmqD3tXXAY\",\n  authDomain: \"crwn-clothing-db-2f969.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-2f969\",\n  storageBucket: \"crwn-clothing-db-2f969.appspot.com\",\n  messagingSenderId: \"132677052582\",\n  appId: \"1:132677052582:web:d39daf1239f93f685cec67\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  // Creates and return the user collection on the data base with the user id\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // If user data does not exists\n  // Create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error.message);\n    }\n  }\n\n  // If user data exist return userDocRef\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password, displayName) => {\n  if (!email || !password) return;\n  const createdUser = await createUserWithEmailAndPassword(auth, email, password);\n  const userDocRef = doc(db, \"users\", createdUser.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // If user data does not exists\n  // Create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = createdUser;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error.message);\n    }\n  }\n\n  // If user data exist return userDocRef\n\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","createdUser"],"sources":["/Users/pedrohvasconcelos/rock-clothing/rock-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\n\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDgyedyGtko6U95FFF4WiBSfYmqD3tXXAY\",\n  authDomain: \"crwn-clothing-db-2f969.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-2f969\",\n  storageBucket: \"crwn-clothing-db-2f969.appspot.com\",\n  messagingSenderId: \"132677052582\",\n  appId: \"1:132677052582:web:d39daf1239f93f685cec67\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\n\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  if (!userAuth) return;\n  // Creates and return the user collection on the data base with the user id\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  // If user data does not exists\n  // Create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error.message);\n    }\n  }\n\n  // If user data exist return userDocRef\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (\n  email,\n  password,\n  displayName\n) => {\n  if (!email || !password) return;\n\n  const createdUser = await createUserWithEmailAndPassword(\n    auth,\n    email,\n    password\n  );\n\n  const userDocRef = doc(db, \"users\", createdUser.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  // If user data does not exists\n  // Create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = createdUser;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error.message);\n    }\n  }\n\n  // If user data exist return userDocRef\n\n  return userDocRef;\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,QACzB,eAAe;AAEtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAId,kBAAkB,EAAE;AAE/Cc,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAAE;AAE7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KACnCnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC;AAEvC,OAAO,MAAMK,EAAE,GAAGjB,YAAY,EAAE;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,IAAI,CAACA,QAAQ,EAAE;EACf;EACA,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACkB,UAAU,CAAC;;EAE7C;EACA;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAM,EAAE,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IACvC,MAAMO,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACF,MAAMxB,MAAM,CAACiB,UAAU,EAAE;QACvBI,WAAW;QACXC,KAAK;QACLC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACvD;EACF;;EAEA;;EAEA,OAAOX,UAAU;AACnB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAChDP,KAAK,EACLQ,QAAQ,EACRT,WAAW,KACR;EACH,IAAI,CAACC,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAEzB,MAAMC,WAAW,GAAG,MAAMnC,8BAA8B,CACtDgB,IAAI,EACJU,KAAK,EACLQ,QAAQ,CACT;EAED,MAAMb,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEiB,WAAW,CAACb,GAAG,CAAC;EAEpD,MAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACkB,UAAU,CAAC;;EAE7C;EACA;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAM,EAAE,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGS,WAAW;IAC1C,MAAMR,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACF,MAAMxB,MAAM,CAACiB,UAAU,EAAE;QACvBI,WAAW;QACXC,KAAK;QACLC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACvD;EACF;;EAEA;;EAEA,OAAOX,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}